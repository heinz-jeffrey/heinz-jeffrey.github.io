# coding=utf-8

# Jeff Heinz
# October 2018
# English Plural with Pynini

import pynini
import functools

A = functools.partial(pynini.acceptor, token_type="utf8")
T = functools.partial(pynini.transducer, input_token_type="utf8", output_token_type="utf8")


# some natural classes

vowel = (A("i") | A("…™") | A("e") | A("…õ") | A("√¶") | A("u") | A(" ä") | A("o") | A("…î") | A("…ë") | A("…ô") | A(" å")).optimize()

consonant = (A("p") | A("b") | A("t") | A("d") | A("k") | A("g") | A("m") | A("n") | A("≈ã") | A("f") | A("v") | A("Œ∏") | A("√∞") | A("s") | A("z") | A(" É") | A(" í") | A("h") | A(" §") | A(" ß") | A("j") | A("w") | A("…π") | A("l")).optimize()

strident = (A("s") | A("z") | A(" É") | A(" í") | A(" §") | A(" ß")).optimize()

voiceless = (A("p") | A("t") | A("k") | A("f") | A("Œ∏") | A("s") | A(" É") | A(" ß")).optimize()

# all segments
sigmaStar = (pynini.closure(vowel | consonant)).optimize()


# phonological changes
epenthesis = pynini.cdrewrite(T("","…™"), strident, strident, sigmaStar)

devoicePairs = (T("b","p") | T("d","t") | T("g","k") | T("v","f") | T("√∞","Œ∏") | T("z","s") | T(" í"," É") | T(" §"," ß")).optimize()
devoicing = pynini.cdrewrite(devoicePairs, voiceless, "", sigmaStar)

phonology = (epenthesis @ devoicing).optimize()

regPlural = (sigmaStar + T("", "z")).optimize() # plural morphology suffixes a 'z'
 
wish = A("w…™ É")
cat = A("k√¶t")
cable = A("ke…™bl")
dog = A("d…îg")

wishesT = ((wish @ regPlural) @ phonology).optimize()
wishes = wishesT.stringify(token_type="utf8")


# THIS DOES NOT WORK
# def makeRegPl(stem):
#   x = ((A(stem) @ regPlural) @ phonology).optimize() 
#   return (x.stringify(token_type="utf8"))

# a lexicon of memorized exceptions

pluralExceptions = ( T("f ät","fit")   # foot/feet 
                   | T("gus","gis")   # goose/geese
                   | T("f…™ É","f…™ É") ).optimize()   # fish/fish

lexicalExceptions = pynini.project(pluralExceptions)

wrongPlural = (lexicalExceptions @ regPlural).optimize()

regPluralLessExceptions = (regPlural - wrongPlural).optimize()

plural = (pluralLessExceptions | pluralExceptions).optimize()

# a lexicon of nouns for which plural morphology applies productively and normally.

lexicon = (wish | cat | dog | cable | foot | goose | fish).optimize()
 
dog_LEX = T("üêï","d…îg") # just playing around with unicode
